#!/usr/bin/env node

/**
 * Script de test pour la fonctionnalit√© de s√©lection automatique de SIM
 * Usage: node scripts/test-sim-selection.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üß™ Test de la fonctionnalit√© de s√©lection automatique de SIM\n');

// V√©rifier que les fichiers n√©cessaires existent
const requiredFiles = [
  'services/simSelectionService.ts',
  'services/adbService.ts',
  'src/components/SimStatusIndicator.tsx'
];

console.log('üìÅ V√©rification des fichiers...');
let allFilesExist = true;

requiredFiles.forEach(file => {
  const filePath = path.join(__dirname, '..', file);
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${file}`);
  } else {
    console.log(`‚ùå ${file} - MANQUANT`);
    allFilesExist = false;
  }
});

if (!allFilesExist) {
  console.log('\n‚ùå Des fichiers sont manquants. Veuillez les cr√©er avant de continuer.');
  process.exit(1);
}

console.log('\nüì± Analyse du fichier XML de test...');

// Analyser le fichier XML de test
const xmlPath = path.join(__dirname, '..', 'window_dump (2).xml');
if (fs.existsSync(xmlPath)) {
  const xmlContent = fs.readFileSync(xmlPath, 'utf-8');
  
  // Analyser le contenu
  const hasDialogTitle = xmlContent.includes('Choisir la carte SIM pour cet appel');
  const hasPersoSim = xmlContent.includes('text="Perso"');
  const hasProSim = xmlContent.includes('text="Pro"');
  const hasPersoNumber = xmlContent.includes('+33 7 69 35 27 28');
  const hasProNumber = xmlContent.includes('+33 7 66 90 67 89');
  const hasDialerPackage = xmlContent.includes('com.google.android.dialer');
  
  console.log(`‚úÖ Titre de la dialog: ${hasDialogTitle ? 'Trouv√©' : 'Non trouv√©'}`);
  console.log(`‚úÖ Option Perso: ${hasPersoSim ? 'Trouv√©e' : 'Non trouv√©e'}`);
  console.log(`‚úÖ Option Pro: ${hasProSim ? 'Trouv√©e' : 'Non trouv√©e'}`);
  console.log(`‚úÖ Num√©ro Perso: ${hasPersoNumber ? 'Trouv√©' : 'Non trouv√©'}`);
  console.log(`‚úÖ Num√©ro Pro: ${hasProNumber ? 'Trouv√©' : 'Non trouv√©'}`);
  console.log(`‚úÖ Package dialer: ${hasDialerPackage ? 'Trouv√©' : 'Non trouv√©'}`);
  
  // Extraire les coordonn√©es de l'option Pro
  const proMatch = xmlContent.match(/text="Pro"[^>]*?bounds="\[(\d+),(\d+)\]\[(\d+),(\d+)\]"/);
  if (proMatch) {
    const [, x1, y1, x2, y2] = proMatch.map(Number);
    const centerX = Math.round((x1 + x2) / 2);
    const centerY = Math.round((y1 + y2) / 2);
    console.log(`üìç Coordonn√©es de l'option Pro: (${centerX}, ${centerY})`);
    console.log(`   Zone compl√®te: [${x1},${y1}] √† [${x2},${y2}]`);
  }
  
} else {
  console.log('‚ùå Fichier XML de test non trouv√©');
}

console.log('\nüîß V√©rification des d√©pendances...');

// V√©rifier package.json
const packagePath = path.join(__dirname, '..', 'package.json');
if (fs.existsSync(packagePath)) {
  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf-8'));
  
  const hasAppium = packageJson.dependencies?.['appium'];
  const hasUiAutomator = packageJson.dependencies?.['appium-uiautomator2-driver'];
  const hasAdb = packageJson.dependencies?.['@yume-chan/adb'];
  
  console.log(`‚úÖ Appium: ${hasAppium ? `v${hasAppium}` : '‚ùå Manquant'}`);
  console.log(`‚úÖ UiAutomator2 Driver: ${hasUiAutomator ? `v${hasUiAutomator}` : '‚ùå Manquant'}`);
  console.log(`‚úÖ ADB Library: ${hasAdb ? `v${hasAdb}` : '‚ùå Manquant'}`);
}

console.log('\nüéØ Simulation de d√©tection...');

// Simuler la logique de d√©tection
const simulateDetection = (xmlContent) => {
  const detectionTests = [
    {
      name: 'Titre principal',
      pattern: /Choisir la carte SIM pour cet appel/,
      result: xmlContent.includes('Choisir la carte SIM pour cet appel')
    },
    {
      name: 'Package dialer',
      pattern: /com\.google\.android\.dialer/,
      result: xmlContent.includes('com.google.android.dialer')
    },
    {
      name: 'Options SIM',
      pattern: /text="(Perso|Pro)"/g,
      result: xmlContent.match(/text="(Perso|Pro)"/g)?.length === 2
    },
    {
      name: 'Num√©ros de t√©l√©phone',
      pattern: /\+33 7 [0-9 ]+/g,
      result: xmlContent.match(/\+33 7 [0-9 ]+/g)?.length === 2
    }
  ];
  
  detectionTests.forEach(test => {
    console.log(`   ${test.result ? '‚úÖ' : '‚ùå'} ${test.name}`);
  });
  
  const allPassed = detectionTests.every(test => test.result);
  return allPassed;
};

if (fs.existsSync(xmlPath)) {
  const xmlContent = fs.readFileSync(xmlPath, 'utf-8');
  const detectionResult = simulateDetection(xmlContent);
  
  console.log(`\nüéØ R√©sultat de la simulation: ${detectionResult ? '‚úÖ SUCC√àS' : '‚ùå √âCHEC'}`);
  
  if (detectionResult) {
    console.log('\nüìã Actions simul√©es:');
    console.log('   1. ‚úÖ Dialog de choix SIM d√©tect√©e');
    console.log('   2. ‚úÖ Identification de l\'option "Pro"');
    console.log('   3. ‚úÖ Calcul des coordonn√©es de clic');
    console.log('   4. ‚úÖ Simulation du clic sur l\'option "Pro"');
    console.log('   5. ‚úÖ V√©rification du r√©sultat');
  }
}

console.log('\nüìö Instructions d\'utilisation:');
console.log('1. Connectez votre appareil Android via USB');
console.log('2. Activez le d√©bogage USB');
console.log('3. Lancez l\'application DimiCall');
console.log('4. Connectez ADB dans l\'interface');
console.log('5. La surveillance automatique se d√©clenchera lors des appels');
console.log('6. Si une dialog de choix SIM appara√Æt, l\'option "Pro" sera s√©lectionn√©e automatiquement');

console.log('\n‚ú® Test termin√© avec succ√®s!'); 