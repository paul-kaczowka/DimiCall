/**
 * Script de test pour la fonctionnalit√© de scroll automatique
 * √Ä ex√©cuter dans la console du navigateur quand DimiCall est ouvert
 */

console.log('üß™ Test du Scroll Automatique DimiCall');

// Fonction pour tester le scroll automatique
function testScrollAutomatique() {
  console.log('üöÄ D√©marrage du test de scroll automatique...');
  
  // V√©rifier que la table est pr√©sente
  const scrollContainer = document.querySelector('[data-contact-id]')?.closest('.overflow-auto');
  if (!scrollContainer) {
    console.error('‚ùå Conteneur de scroll non trouv√©');
    return;
  }
  
  console.log('‚úÖ Conteneur de scroll trouv√©');
  
  // R√©cup√©rer toutes les lignes de contacts
  const contactRows = document.querySelectorAll('[data-contact-id]');
  if (contactRows.length === 0) {
    console.error('‚ùå Aucune ligne de contact trouv√©e');
    return;
  }
  
  console.log(`‚úÖ ${contactRows.length} contacts trouv√©s`);
  
  // Test 1: V√©rifier les attributs data-contact-id
  let contactsWithId = 0;
  contactRows.forEach(row => {
    const contactId = row.getAttribute('data-contact-id');
    if (contactId) {
      contactsWithId++;
    }
  });
  
  console.log(`‚úÖ Test 1: ${contactsWithId}/${contactRows.length} contacts ont un data-contact-id`);
  
  // Test 2: Simuler un scroll vers un contact au milieu de la liste
  if (contactRows.length > 10) {
    const middleIndex = Math.floor(contactRows.length / 2);
    const middleContact = contactRows[middleIndex];
    const contactId = middleContact.getAttribute('data-contact-id');
    
    console.log(`üéØ Test 2: Scroll vers le contact ${contactId} (index ${middleIndex})`);
    
    // Mesurer la position avant
    const beforeScrollTop = scrollContainer.scrollTop;
    
    // D√©clencher le scroll
    middleContact.scrollIntoView({
      behavior: 'smooth',
      block: 'center'
    });
    
    // V√©rifier apr√®s un d√©lai
    setTimeout(() => {
      const afterScrollTop = scrollContainer.scrollTop;
      if (Math.abs(afterScrollTop - beforeScrollTop) > 50) {
        console.log('‚úÖ Test 2: Scroll effectu√© avec succ√®s');
        console.log(`   Avant: ${beforeScrollTop}px, Apr√®s: ${afterScrollTop}px`);
      } else {
        console.log('‚ö†Ô∏è Test 2: Pas de scroll d√©tect√© (contact peut-√™tre d√©j√† visible)');
      }
    }, 1000);
  }
  
  // Test 3: V√©rifier la r√©activit√© aux clics
  console.log('üñ±Ô∏è Test 3: Cliquez sur diff√©rents contacts pour tester le scroll automatique');
  
  // Test 4: Simuler l'utilisation des touches F
  console.log('‚å®Ô∏è Test 4: Utilisez les touches F2-F10 pour tester le workflow complet');
  
  // Test de performance
  console.log('‚ö° Test de performance: Mesure du temps de scroll');
  let scrollStartTime = 0;
  
  const measureScrollPerformance = () => {
    scrollStartTime = performance.now();
  };
  
  const onScrollEnd = () => {
    const scrollTime = performance.now() - scrollStartTime;
    console.log(`üìä Temps de scroll: ${scrollTime.toFixed(2)}ms`);
  };
  
  scrollContainer.addEventListener('scroll', () => {
    clearTimeout(scrollContainer.scrollEndTimer);
    scrollContainer.scrollEndTimer = setTimeout(onScrollEnd, 150);
  });
  
  // Ajouter des listeners pour les tests interactifs
  contactRows.forEach((row, index) => {
    row.addEventListener('click', () => {
      measureScrollPerformance();
      console.log(`üëÜ Contact ${index + 1} cliqu√© - Mesure du scroll en cours...`);
    });
  });
  
  console.log('‚úÖ Configuration des tests termin√©e');
  console.log('');
  console.log('üìù Instructions de test:');
  console.log('1. Cliquez sur diff√©rents contacts dans la table');
  console.log('2. Utilisez les touches F2-F10 avec un contact s√©lectionn√©');
  console.log('3. Observez si la table scroll automatiquement');
  console.log('4. V√©rifiez que le contact s√©lectionn√© reste visible');
  console.log('');
  console.log('üîç Attendu:');
  console.log('- Animation fluide lors du scroll');
  console.log('- Contact centr√© dans la vue');
  console.log('- Pas de scroll si le contact est d√©j√† visible');
  console.log('- Scroll automatique apr√®s utilisation des touches F');
}

// Fonction pour tester la r√©silience
function testResilience() {
  console.log('üõ°Ô∏è Test de r√©silience...');
  
  // Test avec un ID inexistant
  const fakeId = 'contact-inexistant-12345';
  const fakeElement = document.querySelector(`[data-contact-id="${fakeId}"]`);
  
  if (!fakeElement) {
    console.log('‚úÖ Gestion correcte des IDs inexistants');
  } else {
    console.warn('‚ö†Ô∏è Un √©l√©ment avec un ID factice a √©t√© trouv√©');
  }
  
  // Test de la fonction scrollToContact (si accessible)
  if (window.testScrollToContact) {
    try {
      window.testScrollToContact(fakeId);
      console.log('‚úÖ Fonction scrollToContact r√©sistante aux IDs invalides');
    } catch (error) {
      console.error('‚ùå Erreur dans scrollToContact:', error);
    }
  }
}

// Fonction pour analyser les performances
function analyzePerformance() {
  console.log('üìà Analyse des performances...');
  
  const scrollContainer = document.querySelector('.overflow-auto');
  if (!scrollContainer) return;
  
  const contacts = document.querySelectorAll('[data-contact-id]');
  
  console.log(`üìä M√©triques:
    - Nombre de contacts: ${contacts.length}
    - Hauteur du conteneur: ${scrollContainer.clientHeight}px
    - Hauteur totale du contenu: ${scrollContainer.scrollHeight}px
    - Pourcentage visible: ${((scrollContainer.clientHeight / scrollContainer.scrollHeight) * 100).toFixed(1)}%
  `);
  
  // Test de la hauteur moyenne des lignes
  if (contacts.length > 1) {
    const firstContact = contacts[0];
    const secondContact = contacts[1];
    const rowHeight = secondContact.getBoundingClientRect().top - firstContact.getBoundingClientRect().top;
    console.log(`üìè Hauteur moyenne par ligne: ${rowHeight.toFixed(1)}px`);
  }
}

// Ex√©cuter tous les tests
function runAllTests() {
  console.clear();
  console.log('üß™ === TESTS DE SCROLL AUTOMATIQUE DIMICALL ===');
  console.log('');
  
  testScrollAutomatique();
  setTimeout(testResilience, 1000);
  setTimeout(analyzePerformance, 2000);
  
  console.log('');
  console.log('‚è∞ Tests lanc√©s - R√©sultats dans la console');
}

// Exposer les fonctions globalement pour utilisation dans la console
window.testScrollAutomatique = testScrollAutomatique;
window.testResilience = testResilience;
window.analyzePerformance = analyzePerformance;
window.runAllTests = runAllTests;

// Auto-ex√©cution si appel√© directement
if (typeof window !== 'undefined') {
  console.log('üîß Fonctions de test disponibles:');
  console.log('- testScrollAutomatique()');
  console.log('- testResilience()');
  console.log('- analyzePerformance()');
  console.log('- runAllTests() <- Ex√©cute tous les tests');
  console.log('');
  console.log('üí° Tapez runAllTests() pour commencer');
} 