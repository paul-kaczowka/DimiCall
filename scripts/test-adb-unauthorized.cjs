#!/usr/bin/env node

/**
 * Script de test pour v√©rifier le diagnostic des probl√®mes d'autorisation ADB
 * Usage: node scripts/test-adb-unauthorized.js
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üîß Script de Test - Diagnostic Autorisation ADB');
console.log('================================================\n');

// Fonction pour ex√©cuter des commandes ADB
function runAdbCommand(args) {
  return new Promise((resolve, reject) => {
    const adbPath = path.join(__dirname, '..', 'platform-tools-latest-windows (4)', 'platform-tools', 'adb.exe');
    
    console.log(`üì± Ex√©cution: adb ${args.join(' ')}`);
    
    const adb = spawn(adbPath, args, { stdio: 'pipe' });
    
    let stdout = '';
    let stderr = '';
    
    adb.stdout.on('data', (data) => {
      stdout += data.toString();
    });
    
    adb.stderr.on('data', (data) => {
      stderr += data.toString();
    });
    
    adb.on('close', (code) => {
      resolve({ code, stdout, stderr });
    });
    
    adb.on('error', (error) => {
      reject(error);
    });
  });
}

// Fonction pour v√©rifier les cl√©s ADB
function checkAdbKeys() {
  const os = require('os');
  const androidFolder = path.join(os.homedir(), '.android');
  const adbKeyPath = path.join(androidFolder, 'adbkey');
  const adbKeyPubPath = path.join(androidFolder, 'adbkey.pub');
  
  console.log('üîç V√©rification des cl√©s ADB...');
  console.log(`   Dossier .android: ${androidFolder}`);
  console.log(`   Cl√© priv√©e: ${fs.existsSync(adbKeyPath) ? '‚úÖ Existe' : '‚ùå Absent'}`);
  console.log(`   Cl√© publique: ${fs.existsSync(adbKeyPubPath) ? '‚úÖ Existe' : '‚ùå Absent'}`);
  
  return {
    hasPrivateKey: fs.existsSync(adbKeyPath),
    hasPublicKey: fs.existsSync(adbKeyPubPath),
    androidFolder,
    adbKeyPath,
    adbKeyPubPath
  };
}

// Fonction de test principale
async function runTests() {
  try {
    console.log('1Ô∏è‚É£ Test de connexion ADB de base...');
    
    // Test 1: V√©rifier que ADB fonctionne
    const versionResult = await runAdbCommand(['version']);
    if (versionResult.code === 0) {
      console.log('‚úÖ ADB est op√©rationnel');
      console.log(`   Version: ${versionResult.stdout.split('\n')[0]}`);
    } else {
      console.log('‚ùå ADB non op√©rationnel');
      console.log(`   Erreur: ${versionResult.stderr}`);
      return;
    }
    
    console.log('\n2Ô∏è‚É£ Test de d√©tection d\'appareils...');
    
    // Test 2: Lister les appareils
    const devicesResult = await runAdbCommand(['devices', '-l']);
    console.log('üì± R√©sultat adb devices:');
    console.log(devicesResult.stdout);
    
    // Analyser les appareils
    const devices = [];
    const lines = devicesResult.stdout.split('\n');
    
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i].trim();
      if (line && !line.startsWith('*')) {
        const parts = line.split(/\s+/);
        if (parts.length >= 2) {
          devices.push({
            serial: parts[0],
            status: parts[1],
            fullLine: line
          });
        }
      }
    }
    
    console.log(`\nüìä Appareils trouv√©s: ${devices.length}`);
    devices.forEach((device, index) => {
      console.log(`   ${index + 1}. ${device.serial} - Status: ${device.status}`);
      
      if (device.status === 'unauthorized') {
        console.log('      ‚ö†Ô∏è  APPAREIL NON AUTORIS√â D√âTECT√â !');
      } else if (device.status === 'device') {
        console.log('      ‚úÖ Appareil autoris√©');
      } else {
        console.log(`      ‚ùì Status inconnu: ${device.status}`);
      }
    });
    
    console.log('\n3Ô∏è‚É£ V√©rification des cl√©s d\'autorisation...');
    
    // Test 3: V√©rifier les cl√©s ADB
    const keyInfo = checkAdbKeys();
    
    console.log('\n4Ô∏è‚É£ Test de simulation de nettoyage...');
    
    // Test 4: Simuler le processus de nettoyage (sans vraiment supprimer)
    if (keyInfo.hasPrivateKey || keyInfo.hasPublicKey) {
      console.log('üßπ Simulation du nettoyage des cl√©s...');
      console.log('   Les fichiers suivants seraient supprim√©s :');
      if (keyInfo.hasPrivateKey) {
        console.log(`   - ${keyInfo.adbKeyPath}`);
      }
      if (keyInfo.hasPublicKey) {
        console.log(`   - ${keyInfo.adbKeyPubPath}`);
      }
      console.log('   (Simulation seulement - aucun fichier supprim√©)');
    } else {
      console.log('‚ú® Aucune cl√© √† nettoyer (d√©j√† propre)');
    }
    
    console.log('\n5Ô∏è‚É£ Test de red√©marrage du serveur ADB...');
    
    // Test 5: Red√©marrage du serveur ADB
    console.log('üîÑ Arr√™t du serveur ADB...');
    const killResult = await runAdbCommand(['kill-server']);
    
    if (killResult.code === 0) {
      console.log('‚úÖ Serveur ADB arr√™t√©');
    } else {
      console.log('‚ö†Ô∏è Erreur lors de l\'arr√™t du serveur ADB');
    }
    
    console.log('üöÄ Red√©marrage du serveur ADB...');
    const startResult = await runAdbCommand(['start-server']);
    
    if (startResult.code === 0) {
      console.log('‚úÖ Serveur ADB red√©marr√©');
    } else {
      console.log('‚ùå Erreur lors du red√©marrage du serveur ADB');
    }
    
    // Attendre un peu puis re-v√©rifier les appareils
    console.log('\n‚è≥ Attente de 2 secondes...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    console.log('\n6Ô∏è‚É£ V√©rification post-red√©marrage...');
    const finalDevicesResult = await runAdbCommand(['devices', '-l']);
    console.log('üì± Appareils apr√®s red√©marrage:');
    console.log(finalDevicesResult.stdout);
    
    // R√©sum√©
    console.log('\nüìã R√âSUM√â DU TEST');
    console.log('=================');
    console.log(`‚úÖ ADB op√©rationnel: ${versionResult.code === 0 ? 'Oui' : 'Non'}`);
    console.log(`üì± Appareils d√©tect√©s: ${devices.length}`);
    console.log(`‚ö†Ô∏è  Appareils non autoris√©s: ${devices.filter(d => d.status === 'unauthorized').length}`);
    console.log(`‚úÖ Appareils autoris√©s: ${devices.filter(d => d.status === 'device').length}`);
    console.log(`üîë Cl√©s ADB pr√©sentes: ${keyInfo.hasPrivateKey && keyInfo.hasPublicKey ? 'Oui' : 'Non'}`);
    
    const unauthorizedDevices = devices.filter(d => d.status === 'unauthorized');
    if (unauthorizedDevices.length > 0) {
      console.log('\nüîß RECOMMANDATIONS');
      console.log('==================');
      console.log('Des appareils non autoris√©s ont √©t√© d√©tect√©s.');
      console.log('Utilisez DimiCall pour les diagnostiquer automatiquement :');
      console.log('1. Lancez DimiCall');
      console.log('2. Essayez de vous connecter');
      console.log('3. Le dialog de diagnostic devrait s\'ouvrir automatiquement');
      console.log('4. Cliquez sur "Diagnostiquer et Corriger Automatiquement"');
    } else if (devices.length === 0) {
      console.log('\nüìù SUGGESTIONS');
      console.log('==============');
      console.log('Aucun appareil d√©tect√©. V√©rifiez :');
      console.log('1. Que l\'appareil Android est connect√© via USB');
      console.log('2. Que le d√©bogage USB est activ√©');
      console.log('3. Que le c√¢ble USB permet le transfert de donn√©es');
    } else {
      console.log('\nüéâ Tous les appareils sont autoris√©s !');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// Lancer les tests
console.log('D√©marrage des tests...\n');
runTests().then(() => {
  console.log('\nüèÅ Tests termin√©s.');
}).catch((error) => {
  console.error('üí• Erreur fatale:', error);
  process.exit(1);
}); 