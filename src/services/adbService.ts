// Service ADB utilisant les APIs Electron natives
// Remplace l'impl√©mentation WebUSB par une communication directe avec le daemon ADB local

export interface AdbConnectionState {
  isConnected: boolean;
  device: any | null;
  adb: any | null;
  batteryLevel?: number;
  isCharging?: boolean;
  error?: string;
  lastLog?: string;
  autoDetectionEnabled?: boolean;
  currentCallState?: 'idle' | 'ringing' | 'offhook' | 'disconnected';
  lastCallNumber?: string;
  callDuration?: number; // Dur√©e d'appel en ms
}

export interface PhoneCallResult {
  success: boolean;
  message: string;
}

// Nouveaux types pour les √©v√©nements d'appel
export interface CallEndEvent {
  phoneNumber?: string;
  durationMs: number;
  timestamp: Date;
}

export type CallEndCallback = (event: CallEndEvent) => void;

class AdbService {
  private connectionState: AdbConnectionState = {
    isConnected: false,
    device: null,
    adb: null,
    autoDetectionEnabled: false,
    currentCallState: 'idle'
  };

  private listeners: Array<(state: AdbConnectionState) => void> = [];
  private callEndListeners: Array<CallEndCallback> = [];
  private autoDetectionInterval: NodeJS.Timeout | null = null;
  private callMonitorInterval: NodeJS.Timeout | null = null;
  private logBuffer: string[] = [];
  private isElectron: boolean = false;
  
  // Nouvelles propri√©t√©s pour le suivi des appels
  private callStartTime: Date | null = null;
  private wasInCall: boolean = false;

  constructor() {
    this.checkElectronEnvironment();
    this.setAutoDetection(true);
  }

  private checkElectronEnvironment() {
    this.isElectron = typeof window !== 'undefined' && !!window.electronAPI;
    this.log(this.isElectron ? 'üöÄ Environnement Electron d√©tect√© - ADB natif disponible' : '‚ö†Ô∏è Environnement web - ADB natif non disponible');
  }

  private log(message: string, level: 'info' | 'warn' | 'error' = 'info') {
    const timestamp = new Date().toLocaleTimeString('fr-FR');
    const logMessage = `[${timestamp}] ADB: ${message}`;
    
    console.log(logMessage);
    
    // Ajouter au buffer de logs (max 50 entr√©es)
    this.logBuffer.push(logMessage);
    if (this.logBuffer.length > 50) {
      this.logBuffer.shift();
    }
    
    // Mettre √† jour le dernier log dans l'√©tat
    this.connectionState.lastLog = message;
    this.notifyListeners();
  }

  private startAutoDetection() {
    if (!this.isElectron) {
      this.log('‚ùå Auto-d√©tection d√©sactiv√©e - Environnement non-Electron');
      return;
    }

    this.log('üîç D√©marrage de la d√©tection automatique ADB...');
    this.connectionState.autoDetectionEnabled = true;
    
    // V√©rification initiale
    this.checkForConnectedDevices();
    
    // V√©rification p√©riodique toutes les 5 secondes
    this.autoDetectionInterval = setInterval(() => {
      if (this.connectionState.autoDetectionEnabled) {
        this.checkForConnectedDevices();
      }
    }, 5000);
  }

  private async checkForConnectedDevices() {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles');
      return;
    }

    try {
      this.log('üîç Recherche d\'appareils Android connect√©s...');
      
      const result = await window.electronAPI.adb.getDevices();
      
      if (!result.success) {
        this.log(`‚ùå Erreur lors de la recherche d'appareils: ${result.error}`, 'error');
        this.connectionState.error = `Erreur de d√©tection: ${result.error}`;
        this.connectionState.isConnected = false;
        this.connectionState.device = null;
        this.notifyListeners();
        return;
      }

      const devices = result.devices || [];
      this.log(`üì± ${devices.length} appareil(s) ADB trouv√©(s)`);
      
      // Log d√©taill√© des appareils trouv√©s
      devices.forEach((device, index) => {
        this.log(`üì± Appareil ${index + 1}: ${device.serial} (${device.status})`);
      });

      // Chercher un appareil connect√© (status = "device")
      const connectedDevice = devices.find(d => d.status === 'device');
      
      if (connectedDevice) {
        if (!this.connectionState.isConnected || this.connectionState.device?.serial !== connectedDevice.serial) {
          this.log(`‚úÖ Appareil Android connect√© d√©tect√©: ${connectedDevice.serial}`);
          await this.connectToDevice(connectedDevice);
        }
      } else {
        if (this.connectionState.isConnected) {
          this.log('üì± Appareil d√©connect√©');
          this.handleDeviceDisconnection();
        } else {
          this.log('‚ö†Ô∏è Aucun appareil Android autoris√© trouv√©');
          this.connectionState.error = 'Aucun appareil Android connect√© et autoris√©';
          this.notifyListeners();
        }
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de la recherche d'appareils: ${error instanceof Error ? error.message : String(error)}`, 'error');
      this.connectionState.error = `Erreur de d√©tection: ${error instanceof Error ? error.message : String(error)}`;
      this.notifyListeners();
    }
  }

  private async connectToDevice(device: any): Promise<boolean> {
    try {
      this.log(`üîÑ Connexion √† l'appareil ${device.serial}...`);
      
      this.connectionState.isConnected = true;
      this.connectionState.device = device;
      this.connectionState.error = undefined;
      
      this.log(`‚úÖ Connect√© avec succ√®s √† ${device.serial}`);
      
      // R√©cup√©rer les informations de batterie
      await this.updateBatteryStatus();
      
      this.notifyListeners();
      return true;
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de la connexion: ${error instanceof Error ? error.message : String(error)}`, 'error');
      this.connectionState.error = `Erreur de connexion: ${error instanceof Error ? error.message : String(error)}`;
      this.connectionState.isConnected = false;
      this.connectionState.device = null;
      this.notifyListeners();
      return false;
    }
  }

  private handleDeviceDisconnection() {
    this.log('üì± Appareil d√©connect√©');
    this.connectionState.isConnected = false;
    this.connectionState.device = null;
    this.connectionState.batteryLevel = undefined;
    this.connectionState.isCharging = undefined;
    this.connectionState.error = 'Appareil d√©connect√©';
    this.notifyListeners();
  }

  onConnectionStateChange(listener: (state: AdbConnectionState) => void) {
    this.listeners.push(listener);
    // Retourner une fonction de d√©sabonnement
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  onCallEnd(callback: CallEndCallback) {
    this.callEndListeners.push(callback);
    // Retourner une fonction de d√©sabonnement
    return () => {
      const index = this.callEndListeners.indexOf(callback);
      if (index > -1) {
        this.callEndListeners.splice(index, 1);
      }
    };
  }

  private notifyCallEnd(event: CallEndEvent) {
    this.callEndListeners.forEach(callback => {
      try {
        callback(event);
      } catch (error) {
        this.log(`‚ùå Erreur dans callback de fin d'appel: ${error instanceof Error ? error.message : String(error)}`, 'error');
      }
    });
  }

  private notifyListeners() {
    this.listeners.forEach(listener => listener(this.connectionState));
  }

  async connectDevice(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles pour la connexion manuelle');
      return false;
    }

    try {
      this.log('üöÄ D√©marrage de la connexion ADB manuelle...');
      
      // V√©rifier les appareils disponibles
      const result = await window.electronAPI.adb.getDevices();
      
      if (!result.success) {
        this.log(`‚ùå Erreur lors de la recherche d'appareils: ${result.error}`, 'error');
        this.connectionState.error = result.error;
        this.notifyListeners();
        return false;
      }

      const devices = result.devices || [];
      const connectedDevice = devices.find(d => d.status === 'device');
      
      if (connectedDevice) {
        return await this.connectToDevice(connectedDevice);
      } else {
        this.log('‚ùå Aucun appareil Android connect√© trouv√©');
        this.connectionState.error = 'Aucun appareil Android connect√© et autoris√©';
        this.notifyListeners();
        return false;
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de la connexion manuelle: ${error instanceof Error ? error.message : String(error)}`, 'error');
      this.connectionState.error = `Erreur de connexion: ${error instanceof Error ? error.message : String(error)}`;
      this.notifyListeners();
      return false;
    }
  }

  async disconnectDevice(): Promise<void> {
    this.log('üîå D√©connexion ADB...');
    
    this.connectionState.isConnected = false;
    this.connectionState.device = null;
    this.connectionState.adb = null;
    this.connectionState.batteryLevel = undefined;
    this.connectionState.isCharging = undefined;
    this.connectionState.error = undefined;
    
    this.notifyListeners();
    this.log('‚úÖ ADB d√©connect√©');
  }

  async makePhoneCall(phoneNumber: string): Promise<PhoneCallResult> {
    if (!this.connectionState.isConnected || !this.isElectron || !window.electronAPI) {
      return {
        success: false,
        message: 'Aucun appareil ADB connect√©'
      };
    }

    try {
      this.log(`üìû Initiation d'appel vers ${phoneNumber}...`);
      
      const result = await window.electronAPI.adb.makeCall(phoneNumber);
      
      if (result.success) {
        this.log(`‚úÖ Appel initi√© avec succ√®s vers ${phoneNumber}`);
        this.connectionState.lastCallNumber = phoneNumber;
        this.connectionState.currentCallState = 'ringing';
        this.callStartTime = new Date(); // Enregistrer l'heure de d√©but d'appel
        this.wasInCall = false; // Reset du flag
        this.notifyListeners();
        
        // D√©marrer la surveillance de l'appel
        this.startCallMonitoring();
        
        return {
          success: true,
          message: result.message || `Appel initi√© vers ${phoneNumber}`
        };
      } else {
        this.log(`‚ùå √âchec de l'appel: ${result.error}`, 'error');
        return {
          success: false,
          message: result.error || 'Erreur lors de l\'initiation de l\'appel'
        };
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de l'appel: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return {
        success: false,
        message: `Erreur: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  /**
   * RACCROCHAGE ULTRA-ROBUSTE bas√© sur les meilleures pratiques ADB
   * R√©f√©rences: 
   * - https://developer.android.com/studio/command-line/adb
   * - https://techblogs.42gears.com/using-adb-command-to-make-a-call-reject-a-call-and-sending-receiving-a-message/
   */
  async endCall(): Promise<PhoneCallResult> {
    if (!this.connectionState.isConnected || !this.isElectron || !window.electronAPI) {
      return {
        success: false,
        message: 'Aucun appareil ADB connect√©'
      };
    }

    try {
      this.log(`üìû ‚ö° RACCROCHAGE D'APPEL ULTRA-ROBUSTE D√âMARR√â...`);
      
      // Utiliser la nouvelle API Electron ultra-robuste
      const result = await window.electronAPI.adb.endCall();
      
      if (result.success) {
        this.log(`‚úÖ ‚ö° RACCROCHAGE ADB R√âUSSI: ${result.message}`);
        
        // Forcer la fin de monitoring et mise √† jour d'√©tat
        this.log(`üîÑ Mise √† jour forc√©e de l'√©tat d'appel...`);
        this.connectionState.currentCallState = 'idle';
        this.stopCallMonitoring();
        
        // Calculer la dur√©e si un appel √©tait en cours
        if (this.callStartTime) {
          const callDuration = new Date().getTime() - this.callStartTime.getTime();
          
          // Cr√©er l'√©v√©nement de fin d'appel forc√©
          const callEndEvent: CallEndEvent = {
            phoneNumber: this.connectionState.lastCallNumber,
            durationMs: callDuration,
            timestamp: new Date()
          };
          
          // Notifier la fin d'appel
          this.notifyCallEnd(callEndEvent);
          
          this.log(`üìû Appel termin√© - Dur√©e: ${Math.round(callDuration / 1000)}s`);
        }
        
        this.notifyListeners();
        
        return {
          success: true,
          message: result.message || 'Appel raccroch√© avec succ√®s'
        };
      } else {
        this.log(`‚ùå Raccrochage ADB √©chou√©: ${result.error}`, 'error');
        return {
          success: false,
          message: result.error || 'Erreur inconnue lors du raccrochage'
        };
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur critique lors du raccrochage: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return {
        success: false,
        message: `Erreur critique de raccrochage: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  private startCallMonitoring() {
    if (this.callMonitorInterval) {
      clearInterval(this.callMonitorInterval);
    }

    this.callMonitorInterval = setInterval(async () => {
      await this.checkCallState();
    }, 1000); // V√©rifier l'√©tat d'appel toutes les secondes

    this.log('üìû Surveillance d\'appel d√©marr√©e');
  }

  private stopCallMonitoring() {
    if (this.callMonitorInterval) {
      clearInterval(this.callMonitorInterval);
      this.callMonitorInterval = null;
      this.log('üìû Surveillance d\'appel arr√™t√©e');
    }
  }

  async checkCallState(): Promise<void> {
    if (!this.connectionState.isConnected || !this.isElectron || !window.electronAPI) {
      return;
    }

    try {
      // Commande ADB pour v√©rifier l'√©tat des appels
      const result = await window.electronAPI.adb.executeShell('dumpsys telephony.registry | grep "mCallState"');
      
      if (result.success && result.output) {
        const callStateMatch = result.output.match(/mCallState=(\d+)/);
        if (callStateMatch) {
          const callStateValue = parseInt(callStateMatch[1]);
          const previousState = this.connectionState.currentCallState;
          
          // √âtats Android: 0=IDLE, 1=RINGING, 2=OFFHOOK
          let newState: 'idle' | 'ringing' | 'offhook' | 'disconnected' = 'idle';
          switch (callStateValue) {
            case 0:
              newState = 'idle';
              break;
            case 1:
              newState = 'ringing';
              break;
            case 2:
              newState = 'offhook';
              break;
          }

          if (previousState !== newState) {
            this.connectionState.currentCallState = newState;
            this.log(`üìû √âtat d'appel chang√©: ${previousState} ‚Üí ${newState}`);
            
            // Suivre si nous √©tions en communication
            if (newState === 'offhook') {
              this.wasInCall = true;
            }
            
            this.notifyListeners();

            // Si l'appel passe de 'offhook' ou 'ringing' √† 'idle', l'appel est termin√©
            if ((previousState === 'offhook' || previousState === 'ringing') && newState === 'idle') {
              this.log('üìû Appel termin√© d√©tect√©');
              
              // Calculer la dur√©e de l'appel
              const callDuration = this.callStartTime ? 
                new Date().getTime() - this.callStartTime.getTime() : 0;
              
              // Cr√©er l'√©v√©nement de fin d'appel
              const callEndEvent: CallEndEvent = {
                phoneNumber: this.connectionState.lastCallNumber,
                durationMs: callDuration,
                timestamp: new Date()
              };
              
              // Mettre √† jour l'√©tat
              this.connectionState.currentCallState = 'idle';
              this.connectionState.callDuration = callDuration;
              this.connectionState.lastCallNumber = undefined;
              
              // Arr√™ter la surveillance
              this.stopCallMonitoring();
              
              // Reset des variables de suivi
              this.callStartTime = null;
              this.wasInCall = false;
              
              // Notifier les listeners
              this.notifyListeners();
              this.notifyCallEnd(callEndEvent);
              
              this.log(`üìû Appel termin√© - Dur√©e: ${Math.round(callDuration / 1000)}s`);
            }
          }
        }
      }
    } catch (error) {
      this.log(`‚ùå Erreur lors de la v√©rification d'√©tat d'appel: ${error instanceof Error ? error.message : String(error)}`, 'error');
    }
  }

  getCurrentCallState(): 'idle' | 'ringing' | 'offhook' | 'disconnected' {
    return this.connectionState.currentCallState || 'idle';
  }

  getLastCallNumber(): string | undefined {
    return this.connectionState.lastCallNumber;
  }

  async sendSms(phoneNumber: string, message: string): Promise<PhoneCallResult> {
    if (!this.connectionState.isConnected || !this.isElectron || !window.electronAPI) {
      return {
        success: false,
        message: 'Aucun appareil ADB connect√©'
      };
    }

    try {
      this.log(`üí¨ Envoi SMS vers ${phoneNumber}...`);
      
      const result = await window.electronAPI.adb.sendSms(phoneNumber, message);
      
      if (result.success) {
        this.log(`‚úÖ SMS pr√©par√© avec succ√®s pour ${phoneNumber}`);
        return {
          success: true,
          message: result.message || `SMS pr√©par√© pour ${phoneNumber}`
        };
      } else {
        this.log(`‚ùå √âchec du SMS: ${result.error}`, 'error');
        return {
          success: false,
          message: result.error || 'Erreur lors de la pr√©paration du SMS'
        };
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de l'envoi SMS: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return {
        success: false,
        message: `Erreur: ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }

  async updateBatteryStatus(): Promise<void> {
    if (!this.connectionState.isConnected || !this.isElectron || !window.electronAPI) {
      return;
    }

    try {
      this.log('üîã Mise √† jour du statut de la batterie...');
      
      const result = await window.electronAPI.adb.getBattery();
      
      if (result.success) {
        this.connectionState.batteryLevel = result.level;
        this.connectionState.isCharging = result.isCharging;
        this.log(`üîã Batterie: ${result.level}% ${result.isCharging ? 'üîå' : 'üîã'}`);
        this.notifyListeners();
      } else {
        this.log(`‚ùå Erreur batterie: ${result.error}`, 'warn');
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de la mise √† jour de la batterie: ${error instanceof Error ? error.message : String(error)}`, 'error');
    }
  }

  async restartAdbServer(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles pour red√©marrer ADB');
      return false;
    }

    try {
      this.log('üîÑ Red√©marrage du serveur ADB...');
      
      const result = await window.electronAPI.adb.restartServer();
      
      if (result.success) {
        this.log('‚úÖ Serveur ADB red√©marr√© avec succ√®s');
        // Relancer la d√©tection apr√®s red√©marrage
        setTimeout(() => this.checkForConnectedDevices(), 2000);
        return true;
      } else {
        this.log(`‚ùå Erreur lors du red√©marrage ADB: ${result.error}`, 'error');
        return false;
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors du red√©marrage ADB: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return false;
    }
  }

  getConnectionState(): AdbConnectionState {
    return { ...this.connectionState };
  }

  isWebUsbSupported(): boolean {
    // Dans cette impl√©mentation, on utilise ADB natif via Electron
    return this.isElectron;
  }

  async testConnection(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      return false;
    }

    try {
      const result = await window.electronAPI.adb.getDevices();
      return result.success && (result.devices?.length || 0) > 0;
    } catch {
      return false;
    }
  }

  getLogs(): string[] {
    return [...this.logBuffer];
  }

  setAutoDetection(enabled: boolean) {
    this.connectionState.autoDetectionEnabled = enabled;
    
    if (enabled && !this.autoDetectionInterval) {
      this.startAutoDetection();
    } else if (!enabled && this.autoDetectionInterval) {
      clearInterval(this.autoDetectionInterval);
      this.autoDetectionInterval = null;
      this.log('‚èπÔ∏è D√©tection automatique d√©sactiv√©e');
    }
    
    this.notifyListeners();
  }

  cleanup() {
    if (this.autoDetectionInterval) {
      clearInterval(this.autoDetectionInterval);
      this.autoDetectionInterval = null;
    }
    if (this.callMonitorInterval) {
      clearInterval(this.callMonitorInterval);
      this.callMonitorInterval = null;
    }
    this.log('üßπ Service ADB nettoy√©');
  }

  /**
   * Diagnostic et r√©solution automatique des probl√®mes d'autorisation ADB
   */
  async diagnoseAndFixUnauthorized(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles pour le diagnostic');
      return false;
    }

    try {
      this.log('üîß Diagnostic des probl√®mes d\'autorisation ADB...');
      
      // √âtape 1: V√©rifier l'√©tat actuel des appareils
      const deviceResult = await window.electronAPI.adb.getDevices();
      if (!deviceResult.success) {
        this.log(`‚ùå Impossible de lister les appareils: ${deviceResult.error}`, 'error');
        return false;
      }

      const devices = deviceResult.devices || [];
      const unauthorizedDevices = devices.filter(d => d.status === 'unauthorized');
      
      if (unauthorizedDevices.length === 0) {
        this.log('‚úÖ Aucun appareil non autoris√© trouv√©');
        return true;
      }

      this.log(`‚ö†Ô∏è ${unauthorizedDevices.length} appareil(s) non autoris√©(s) d√©tect√©(s)`);
      unauthorizedDevices.forEach(device => {
        this.log(`  üì± ${device.serial} - Status: ${device.status}`);
      });

      // √âtape 2: Arr√™ter le serveur ADB
      this.log('üîÑ Arr√™t du serveur ADB...');
      const killResult = await window.electronAPI.adb.killServer();
      if (!killResult.success) {
        this.log(`‚ö†Ô∏è Erreur lors de l'arr√™t ADB: ${killResult.error}`, 'warn');
      } else {
        this.log('‚úÖ Serveur ADB arr√™t√©');
      }

      // √âtape 3: Nettoyer les cl√©s ADB
      this.log('üßπ Nettoyage des cl√©s d\'autorisation ADB...');
      const cleanResult = await window.electronAPI.adb.cleanAuthKeys();
      if (!cleanResult.success) {
        this.log(`‚ö†Ô∏è Erreur lors du nettoyage: ${cleanResult.error}`, 'warn');
      } else {
        this.log('‚úÖ Cl√©s d\'autorisation nettoy√©es');
      }

      // √âtape 4: Red√©marrer le serveur ADB
      this.log('üöÄ Red√©marrage du serveur ADB...');
      const startResult = await window.electronAPI.adb.startServer();
      if (!startResult.success) {
        this.log(`‚ùå Erreur lors du red√©marrage: ${startResult.error}`, 'error');
        return false;
      }
      this.log('‚úÖ Serveur ADB red√©marr√©');

      // √âtape 5: Attendre un peu pour la d√©tection
      await new Promise(resolve => setTimeout(resolve, 2000));

      // √âtape 6: V√©rifier les nouveaux appareils
      this.log('üîç V√©rification des appareils apr√®s nettoyage...');
      const newDeviceResult = await window.electronAPI.adb.getDevices();
      if (!newDeviceResult.success) {
        this.log(`‚ùå Impossible de v√©rifier les appareils: ${newDeviceResult.error}`, 'error');
        return false;
      }

      const newDevices = newDeviceResult.devices || [];
      const stillUnauthorized = newDevices.filter(d => d.status === 'unauthorized');
      
      if (stillUnauthorized.length === 0) {
        this.log('üéâ Probl√®me d\'autorisation r√©solu ! Tous les appareils sont maintenant autoris√©s.');
        
        // Relancer la d√©tection automatique
        this.checkForConnectedDevices();
        return true;
      } else {
        this.log('‚ö†Ô∏è Certains appareils n√©cessitent encore une autorisation manuelle sur l\'appareil Android');
        this.log('üì± Instructions:');
        this.log('   1. V√©rifiez que le "D√©bogage USB" est activ√© sur votre appareil Android');
        this.log('   2. Recherchez une popup d\'autorisation sur votre t√©l√©phone');
        this.log('   3. Cochez "Toujours autoriser cet ordinateur" et appuyez sur "OK"');
        this.log('   4. Si aucune popup n\'appara√Æt, d√©connectez et reconnectez le c√¢ble USB');
        
        return false;
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors du diagnostic: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return false;
    }
  }

  /**
   * Nettoie les cl√©s d'autorisation ADB et red√©marre le serveur
   */
  async cleanAdbKeys(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles pour le nettoyage');
      return false;
    }

    try {
      this.log('üßπ Nettoyage des cl√©s d\'autorisation ADB...');
      
      const result = await window.electronAPI.adb.cleanAuthKeys();
      
      if (result.success) {
        this.log('‚úÖ Cl√©s d\'autorisation nettoy√©es avec succ√®s');
        
        // Red√©marrer le serveur ADB apr√®s nettoyage
        await this.restartAdbServer();
        
        return true;
      } else {
        this.log(`‚ùå Erreur lors du nettoyage: ${result.error}`, 'error');
        return false;
      }
      
    } catch (error) {
      this.log(`‚ùå Erreur lors du nettoyage: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return false;
    }
  }

  /**
   * Force la reconnexion des appareils non autoris√©s
   */
  async forceReconnectUnauthorized(): Promise<boolean> {
    if (!this.isElectron || !window.electronAPI) {
      this.log('‚ùå APIs Electron non disponibles');
      return false;
    }

    try {
      this.log('üîÑ Force la reconnexion des appareils non autoris√©s...');
      
      // Tuer et red√©marrer le serveur ADB
      await window.electronAPI.adb.killServer();
      await new Promise(resolve => setTimeout(resolve, 1000));
      await window.electronAPI.adb.startServer();
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // V√©rifier les appareils
      this.checkForConnectedDevices();
      
      this.log('‚úÖ Reconnexion forc√©e termin√©e');
      return true;
      
    } catch (error) {
      this.log(`‚ùå Erreur lors de la reconnexion: ${error instanceof Error ? error.message : String(error)}`, 'error');
      return false;
    }
  }
}

export const adbService = new AdbService(); 